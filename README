Due date: Sunday 4/3/2016 @11:59pm

Objective: Work with more realistic (still ideal) memory,
           think about performance

Assignment: 

(1) Update your design for p8 in order to work with slightly more realistic
    memory and register file implementations.

    - output is registered; if read-enable is asserted in a given cycle, the
      corresponding data will be present on the data lines in the following
      cycle. This single cycle delay will force you to think in terms of
      a multiple stages.

    - You no longer can declare registers as an array in your ppc module. You're
      required to use the regs modules (in regs.v)

    - You're limited to 2 memory read ports, 2 register read ports, and
      2 register write ports

    - writing the same register on both ports is disallowed.

    - The clock module has a "halt" signal. Asserting that signal terminates
      the simulation and prints the number of cycles. You're not allowed to
      call $finish in your design.

(2) You're expected to contribute a test case that has the same name as your
    CSID. Feel free to use your test from p8 as is or with updates

(3) Your score will depend on:

    - correctness (passing as many tests as possible)
    - performance (number of cycles needed to run the tests)
    - your test's ability to either break other code or slow it down

Files and modules:
~~~~~~~~~~~~~~~~~~

mem.v contains the simple memory implementation (2 read ports)

regs.v contains the register file implementation (2 read ports + 2 write ports)

clock.v contains the clock generator, it prints the number of cycles needed
    to run and contains logic to terminate the simulation after 10000 cycles

ppc.v your implementation. You must use mem for your memory and clock for your
    clock

Please leave mem.v, regs.v, and clock.v alone, feel free to change ppc.v

The general purpose registers must be accessed in regs.v

To compile
~~~~~~~~~~

    make

To test
~~~~~~~

    make clean test

    # expected output in hello.ok, ...
    # actual output in hello.out, ...


To run one test
~~~~~~~~~~~~~~~

    make clean hello.res

    hello.ok    ... expected output
    hello.out   ... actual output
    hello.raw   ... raw with debug output
    hello.vcd   ... waveform file
    hello.cycle ... number of cycles needed to run hello

To look at waveforms:
~~~~~~~~~~~~~~~~~~~~~

    make clean test
    gtkwave hello.vcd
